@using BlazorView.Services;
@using BusinessLayer;
@using DataLayer;
@using Microsoft.AspNetCore.Identity;
@using ServiceLayer;
@inject GroupManager groupManager;
@inject UserManager<User> userManager;
@inject SignInManager<User> signInManager;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject MessagingDbContext dbContext;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorView</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <span class="oi oi-home" aria-hidden="true"></span> Home
        </NavLink>
    </div>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="users">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Users
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="groups">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Groups
                </NavLink>
            </div>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="User">
        <Authorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="groups/Create">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Create new group
                </NavLink>
            </div>
            @foreach(Group item in Groups)
            {
                <div class="nav-item px-3">
                    @if (item.CoverImage != null)
                    {
                        <img src="data:image;base64, @System.Convert.ToBase64String(item.CoverImage)" />
                    }
                    <a href ="groups/chat/@item.Id">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> @item.Name
                    </a>
                </div>
            }
        </Authorized>
    </AuthorizeView>
    </nav>
</div>

@code {
    public ICollection<Group> Groups = new List<Group>();

    AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        //(⌐■_■)
        //( •_•)>⌐■-■
        //(•_•)
        await Task.Delay(2000);
        authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            User user = await userManager.FindByNameAsync(authState.User.Identity.Name);
            dbContext.Entry(user).Collection(u => u.Groups).Load();
            Groups = user.Groups;
        }
    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
