@page "/groups/chat/{Id:int}"
@using BlazorView.Services;
@using BusinessLayer;
@using Microsoft.AspNetCore.Identity;
@using MudBlazor
@using ServiceLayer;
@using System.Security.Claims;
@inject GroupManager groupManager;
@inject IdentityManager identityManager;
@inject UserManager<User> userManager;  
@inject SignInManager<User> signInManager;
@inject TextMessageManager textMessageManager;
@inject ImageMessageManager imageMessageManager;
@inject NavigationManager navigationManager;
@inject StateContainer<Group> groupContainer;
@inject AuthenticationStateProvider authenticationState;

<h1>@Model.Name</h1>

@if(Model != null)
{   
    <a href="groups/edit" @onclick="(() => SetGroup(Model))">Edit | </a>
    <a href="groups/delete" @onclick="(() => SetGroup(Model))">Delete</a>
}

<table class="table">
    <tbody>
        @if (Model == null)
        {
            <tr><td>Loading...</td></tr>
        }
        else
        {
            @foreach (Message item in Model.Messages)
            {
                if(item.Sender.UserName == User.Identity.Name)
                {
                    <tr style="position: relative; left: 30px">
                        <td>
                            @if (item is TextMessage)
                            {
                                TempTextMsg = (TextMessage)item;
                                @TempTextMsg.Text;
                            } else
                            {
                                TempImgMsg = (ImageMessage)item;
                                @if (TempImgMsg.Image != null)
                                {
                                    <img src="data:image;base64, @System.Convert.ToBase64String(TempImgMsg.Image)" />
                                }
                                @TempImgMsg.Description;
                            }
                        </td>
                    </tr>
                }
                else
                {
                    <tr style="position: relative; right: 30px">
                        <td>
                            @if (item is TextMessage)
                            {
                                TempTextMsg = (TextMessage)item;
                                @TempTextMsg.Text;
                            }
                            else
                            {
                                TempImgMsg = (ImageMessage)item;
                                @if (TempImgMsg.Image != null)
                                {
                                    <img src="data:image;base64, @System.Convert.ToBase64String(TempImgMsg.Image)" />
                                }
                                @TempImgMsg.Description;
                            }
                        </td>
                    </tr>
                }

            }
        }
    </tbody>
</table>
<MudGrid>
    <MudItem>
        <MudForm>
            <MudPaper>
                <div class="col-md-5 col-sm-12">
                    <MudTextField T="string" Label="Message" @bind-Value="TypedMessage"
                                  ResetValueOnEmptyText="true"
                                  CoerceText="true" CoerceValue="false"
                                  Variant="Variant.Outlined"
                                  Immediate="true" />
                </div>
                <div class="form-group">
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Save"
                               IconColor="Color.Primary"
                               Size="Size.Large"
                               OnClick="SendMessage">Send</MudButton>
                </div>
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadImage">
                    <ButtonTemplate>
                        <MudFab HtmlTag="label"
                                Color="Color.Secondary"
                                StartIcon="@Icons.Material.Filled.Image"
                                Label="Load picture"
                                for="@context.Id" />
                    </ButtonTemplate>
                </MudFileUpload>
            </MudPaper>
        </MudForm>
    </MudItem>
</MudGrid>

@code {
    Group Model = new Group();

    [Parameter]
    public int Id { get; set; }

    TextMessage TempTextMsg = new();

    ImageMessage TempImgMsg = new();

    string TypedMessage = null;

    ClaimsPrincipal User;

    protected override async Task OnInitializedAsync()
    {
        await UpdateModel();
        //TextMessage msg = new("Nice try", null, Model);
        //await textMessageManager.CreateAsync(msg);
        var authState = await authenticationState.GetAuthenticationStateAsync();
        User = authState.User;
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateModel();
    }

    protected async Task UpdateModel()
    {
        Model = await groupManager.ReadAsync(Id, true, false);
    }

    async Task SendMessage()
    {
        User user = await userManager.FindByNameAsync(User.Identity.Name);
        TextMessage msg = new TextMessage(TypedMessage, user, Model);
        await groupManager.AddTextMessageAsync(Model, msg);
        TypedMessage = null;
    }

    private async Task UploadImage(IBrowserFile uploadedFile)
    {
            await using var memoryStream = new MemoryStream();
            await uploadedFile.OpenReadStream().CopyToAsync(memoryStream);
            User user = await userManager.FindByNameAsync(User.Identity.Name);
            ImageMessage msg = new ImageMessage(memoryStream.ToArray(), TypedMessage, user, Model);
            await imageMessageManager.CreateAsync(msg);
    }

    void SetGroup(Group group)
    {
        groupContainer.SetValue(group);
    }
}