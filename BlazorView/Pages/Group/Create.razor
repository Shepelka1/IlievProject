@page "/groups/create"
@using Microsoft.AspNetCore.Identity;
@using ServiceLayer;
@using BlazorView.Services;
@using MudBlazor;
@using BusinessLayer;
@using MudBlazor.Services;
@using System.Security.Claims;
@inject GroupManager groupManager;
@inject IdentityManager identityManager;
@inject UserManager<User> userManager;
@inject NavigationManager navigationManager;
@inject AuthenticationStateProvider authenticationState;

<h1>Create</h1>

<h4>Group</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <MudForm Model="Model">
            <div class="form-group">
                <MudTextField @bind-value="Model.Name"
                              T="string" class="form-control"
                              Label="Username"
                              Variant="Variant.Outlined"
                              For="@( () => Model.Name )" />
            </div>
            <div class="form-group">
                <div class="col-md-5 col-sm-12">
                    <MudAutocomplete T="User" Label="Users" @bind-Value="SelectedUser" SearchFunc="@SearchUsers"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true" CoerceValue="false"
                                     ToStringFunc="@(u => u==null?null : $"{u.UserName}")"
                                     Variant="Variant.Outlined"
                                     Immediate="true" />
                </div>
                <div class="col-md-5 col-sm-12">
                    <MudButton class="btn btn-primary" OnClick="@(() => AddUser())">Add</MudButton>
                </div>
                @foreach (var item in SelectedUsers)
                {
                    <a>@item.UserName</a>
                    <a @onclick="@(() => SelectedUsers.Remove(item))"> ✖</a>
                    <a>| </a>
                }
            </div>
            <div class="form-group">
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Save"
                           IconColor="Color.Primary"
                           Size="Size.Large"
                           OnClick="CreateGroup">Save</MudButton>
            </div>
        </MudForm>
    </div>
</div>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="form-group">
            <MudButton Variant="Variant.Filled"
                       IconColor="Color.Secondary"
                       Size="Size.Large"
                       Href="groups">Back</MudButton>
        </div>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="User">
    <Authorized>
        <div class="form-group">
            <MudButton Variant="Variant.Filled"
                       IconColor="Color.Secondary"
                       Size="Size.Large"
                       Href="/">Back</MudButton>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    Group Model = new();
    User SelectedUser = new();
    List<User> SelectedUsers = new();

    ClaimsPrincipal User;

    ICollection<User> Users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        Users = await identityManager.ReadAllAsync(false, false);
        var authState = await authenticationState.GetAuthenticationStateAsync();
        User = authState.User;
    }

    void AddUser()
    {
        if (!SelectedUsers.Contains(SelectedUser) && SelectedUser != null)
            SelectedUsers.Add(SelectedUser);
        SelectedUser = null;
    }

    private async Task<IEnumerable<User>> SearchUsers(string value)
    {
        User currentUser = await userManager.FindByNameAsync(User.Identity.Name);

        if (currentUser == null)
            return new List<User>();

        if (string.IsNullOrEmpty(value))
            return Users.Intersect(currentUser.Friends);

        return Users.Intersect(currentUser.Friends).Where(u => u.UserName.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));

    }

    private async Task CreateGroup()
    {
        Model.Users = SelectedUsers;
        await groupManager.CreateAsync(Model);
        navigationManager.NavigateTo("groups", true);
    }
}